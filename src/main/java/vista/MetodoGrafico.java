/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vista;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.text.DecimalFormat;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cindy
 */
public class MetodoGrafico extends javax.swing.JPanel {

    public MetodoGrafico() {
        initComponents();
    }

    // ---------------- Helper ----------------
    private Double parseDouble(Object cell) {
        if (cell == null) {
            return null;
        }
        String s = cell.toString().trim();
        if (s.isEmpty()) {
            return null;
        }
        try {
            return Double.parseDouble(s);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtEX = new javax.swing.JTextField();
        txtEY = new javax.swing.JTextField();
        btnMinimizar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        txtRespuesta = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        btnMaximizar = new javax.swing.JButton();
        txtTipo = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPuntosIn = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRestricciones = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblPuntos = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        Grafica = new javax.swing.JLabel();

        setBackground(new java.awt.Color(230, 230, 230));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(33, 48, 71));
        jLabel1.setText("Ecuación");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, -1, -1));

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(33, 48, 71));
        jLabel2.setText("MÉTODO GRÁFICO ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, -1, 25));

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(33, 48, 71));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Restricciones");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 40, 270, -1));

        txtEX.setBackground(new java.awt.Color(204, 204, 204));
        txtEX.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        txtEX.setForeground(new java.awt.Color(33, 48, 71));
        txtEX.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEX.setBorder(null);
        add(txtEX, new org.netbeans.lib.awtextra.AbsoluteConstraints(145, 110, 50, 25));

        txtEY.setBackground(new java.awt.Color(204, 204, 204));
        txtEY.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        txtEY.setForeground(new java.awt.Color(33, 48, 71));
        txtEY.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtEY.setBorder(null);
        add(txtEY, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 50, 25));

        btnMinimizar.setBackground(new java.awt.Color(204, 204, 204));
        btnMinimizar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        btnMinimizar.setForeground(new java.awt.Color(33, 48, 71));
        btnMinimizar.setText("MINIMIZAR");
        btnMinimizar.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(33, 48, 71), null));
        btnMinimizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMinimizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizarActionPerformed(evt);
            }
        });
        add(btnMinimizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 510, 100, 30));

        btnLimpiar.setBackground(new java.awt.Color(204, 204, 204));
        btnLimpiar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(33, 48, 71));
        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(33, 48, 71), null));
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 590, 100, 30));

        jLabel17.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(33, 48, 71));
        jLabel17.setText("RESPUESTA");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 110, -1, -1));

        txtRespuesta.setBackground(new java.awt.Color(204, 204, 204));
        txtRespuesta.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        txtRespuesta.setForeground(new java.awt.Color(33, 48, 71));
        txtRespuesta.setBorder(null);
        add(txtRespuesta, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 190, 25));

        jLabel18.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(33, 48, 71));
        jLabel18.setText("Puntos de Intersección");
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 350, -1, -1));

        btnMaximizar.setBackground(new java.awt.Color(204, 204, 204));
        btnMaximizar.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        btnMaximizar.setForeground(new java.awt.Color(33, 48, 71));
        btnMaximizar.setText("MAXIMIZAR");
        btnMaximizar.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(33, 48, 71), null));
        btnMaximizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnMaximizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaximizarActionPerformed(evt);
            }
        });
        add(btnMaximizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 550, 100, 30));

        txtTipo.setBackground(new java.awt.Color(230, 230, 230));
        txtTipo.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 24)); // NOI18N
        txtTipo.setForeground(new java.awt.Color(33, 48, 71));
        txtTipo.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtTipo.setBorder(null);
        add(txtTipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 190, 25));

        jSeparator1.setBackground(new java.awt.Color(33, 48, 71));
        jSeparator1.setForeground(new java.awt.Color(33, 48, 71));
        jSeparator1.setOpaque(true);
        add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 10, 980, 2));

        jSeparator2.setBackground(new java.awt.Color(33, 48, 71));
        jSeparator2.setForeground(new java.awt.Color(33, 48, 71));
        jSeparator2.setOpaque(true);
        add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 663, 980, 2));

        jSeparator3.setBackground(new java.awt.Color(33, 48, 71));
        jSeparator3.setForeground(new java.awt.Color(33, 48, 71));
        jSeparator3.setOpaque(true);
        add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(942, -7, 2, 700));

        tblPuntosIn.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 12)); // NOI18N
        tblPuntosIn.setForeground(new java.awt.Color(33, 48, 71));
        tblPuntosIn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "X", "Y", "Z"
            }
        ));
        jScrollPane1.setViewportView(tblPuntosIn);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 380, 190, 110));

        jLabel14.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(33, 48, 71));
        jLabel14.setText("Y");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(295, 110, 20, 25));

        jLabel23.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(33, 48, 71));
        jLabel23.setText("X   +");
        add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 50, 25));

        jLabel3.setBackground(new java.awt.Color(230, 230, 230));
        jLabel3.setOpaque(true);
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 650, 150, 40));

        jLabel5.setBackground(new java.awt.Color(230, 230, 230));
        jLabel5.setOpaque(true);
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 520, 30, 160));

        jLabel6.setBackground(new java.awt.Color(230, 230, 230));
        jLabel6.setOpaque(true);
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(788, 520, 30, 160));

        jLabel7.setBackground(new java.awt.Color(230, 230, 230));
        jLabel7.setOpaque(true);
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 485, 150, 40));

        jTextPane1.setBackground(new java.awt.Color(230, 230, 230));
        jTextPane1.setText("⠐⣪⡑⣤⣶⣶⣶⣦⡔⣩⡒⠀ ⢸⣯⣾⣿⢏⣿⣏⢿⣿⣮⣿⠀ ⢸⣿⢸⡗⣶⠙⢱⡖⣿⢸⣿⠀ ⢸⡿⠀⠳⣄⣐⣂⡴⠃⠸⣿⠀ ⣾⠃⠀⡵⡔⠕⠕⡰⡅⠀⢻⡆ ⢹⡆⠘⢴⠙⠑⠉⢳⡱⠀⣾⠁ ⠊⠀⠀⠈⡖⡖⡖⡎⠀⠀⠈⠂ ⠀⠀⠀⠀⠉⠁⠉⠁⠀⠀⠀⠀");
        jTextPane1.setToolTipText("");
        jScrollPane2.setViewportView(jTextPane1);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 520, 130, 140));

        tblRestricciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "X", "Y", "Signo", "Z"
            }
        ));
        jScrollPane3.setViewportView(tblRestricciones);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 70, 190, 130));

        tblPuntos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Punto X", "Punto Y"
            }
        ));
        jScrollPane4.setViewportView(tblPuntos);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, 190, 130));

        Grafica.setPreferredSize(new java.awt.Dimension(2000, 2000));
        jScrollPane5.setViewportView(Grafica);

        add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, 580, 460));
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        //ECUACION
        txtEX.setText("");
        txtEY.setText("");

        //RESPUESTA
        txtRespuesta.setText("");

        //TABLA PUNTOS INTERSECIÓN
        int filas = tblPuntosIn.getRowCount();
        int columnas = tblPuntosIn.getColumnCount();

        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                tblPuntosIn.setValueAt("", i, j);
            }
        }

        //TABLA RESTRICCIONES Y PUNTOS GRAFICA
        DefaultTableModel mR = (DefaultTableModel) tblRestricciones.getModel();
        DefaultTableModel mP = (DefaultTableModel) tblPuntos.getModel();

        mR.setRowCount(0);
        mP.setRowCount(0);

        for (int i = 0; i < 3; i++) {
            mR.addRow(new Object[]{null, null, null, null});
        }
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnMinimizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizarActionPerformed

        DecimalFormat df = new DecimalFormat("#.##");

        //ENCONTRAR VALORES PARA GRAFICAR
        DefaultTableModel mR = (DefaultTableModel) tblRestricciones.getModel();
        DefaultTableModel mP = (DefaultTableModel) tblPuntos.getModel();
        DefaultTableModel mPI = (DefaultTableModel) tblPuntosIn.getModel();

        //Limpiar resultados anteriores
        mP.setRowCount(0);

        for (int i = 0; i < 3; i++) {
            Double x = parseDouble(mR.getValueAt(i, 0));
            Double y = parseDouble(mR.getValueAt(i, 1));
            Double z = parseDouble(mR.getValueAt(i, 3));

            if (z == null) {
                continue;
            }

            if (i < 2) {
                // Primeras dos filas
                double px = (x != null && x != 0) ? z / x : 0;
                double py = (y != null && y != 0) ? z / y : 0;
                mP.addRow(new Object[]{df.format(px), df.format(py)});
            } else {
                // Última fila
                Object valSigno = mR.getValueAt(2, 2);
                if (valSigno == null || (!valSigno.toString().trim().equals("<")
                        && !valSigno.toString().trim().equals(">"))) {
                    JOptionPane.showMessageDialog(null,
                            "En la última fila debe ingresar '<' o '>' en la columna Signo.");
                    return;
                }

                if (x != null && Math.abs(x - 1.0) < 1e-9) {
                    mP.addRow(new Object[]{df.format(z), df.format(0)});
                } else if (y != null && Math.abs(y - 1.0) < 1e-9) {
                    mP.addRow(new Object[]{df.format(0), df.format(z)});
                } else {
                    JOptionPane.showMessageDialog(null,
                            "En la última fila debe ingresar 1 en X o Y y Z correspondiente.");
                    return;
                }
            }
        }

        //============ GRAFICA ============
        //Definir un tamaño grande para poder hacer scroll
        int ancho = 2000;
        int alto = 2000;
        int margen = 50;
        int escala = 20;    // cada unidad = 20 píxeles
        int paso = 1;       // numeración cada 1 unidad

        BufferedImage imagen = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = imagen.createGraphics();

        //Fondo blanco
        g2.setColor(Color.WHITE);
        g2.fillRect(0, 0, ancho, alto);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        //Dibujar cuadrícula
        g2.setColor(new Color(230, 230, 230));
        for (int x = margen; x < ancho - margen; x += escala * paso) {
            g2.drawLine(x, margen, x, alto - margen);
        }
        for (int y = alto - margen; y > margen; y -= escala * paso) {
            g2.drawLine(margen, y, ancho - margen, y);
        }

        //Dibujar ejes
        g2.setColor(Color.BLACK);
        g2.drawLine(margen, alto - margen, ancho - margen, alto - margen); // eje X
        g2.drawLine(margen, margen, margen, alto - margen);                // eje Y

        //Flechas de ejes
        g2.drawLine(ancho - margen, alto - margen, ancho - margen - 10, alto - margen - 5);
        g2.drawLine(ancho - margen, alto - margen, ancho - margen - 10, alto - margen + 5);
        g2.drawLine(margen, margen, margen - 5, margen + 10);
        g2.drawLine(margen, margen, margen + 5, margen + 10);

        //Etiquetas de los ejes
        g2.drawString("X", ancho - margen + 15, alto - margen + 5);
        g2.drawString("Y", margen - 15, margen - 10);

        //Numeración eje X
        g2.setFont(new Font("Arial", Font.PLAIN, 10));

        for (int xVal = 0; xVal <= (ancho - 2 * margen) / escala; xVal += paso) {
            int px = margen + xVal * escala;
            int py = alto - margen;
            g2.drawLine(px, py - 3, px, py + 3);
            g2.drawString(String.valueOf(xVal), px - 5, py + 15);
        }

        //Numeración eje Y
        for (int yVal = 0; yVal <= (alto - 2 * margen) / escala; yVal += paso) {
            int px = margen;
            int py = alto - margen - yVal * escala;
            g2.drawLine(px - 3, py, px + 3, py);
            g2.drawString(String.valueOf(yVal), px - 30, py + 5);
        }

        //Dibujar restricciones de la tabla
        DefaultTableModel modelo = (DefaultTableModel) tblPuntos.getModel();
        int filas = modelo.getRowCount();

        for (int i = 0; i < filas; i++) {
            Object objX = modelo.getValueAt(i, 0);
            Object objY = modelo.getValueAt(i, 1);

            if (objX == null && objY == null) {
                continue;
            }

            int x = (objX != null && !objX.toString().isEmpty()) ? Integer.parseInt(objX.toString()) : 0;
            int y = (objY != null && !objY.toString().isEmpty()) ? Integer.parseInt(objY.toString()) : 0;

            // Caso 1: tiene interceptos en ambos ejes
            if (x > 0 && y > 0) {
                // (x,0)
                int px1 = margen + x * escala;
                int py1 = alto - margen;
                // (0,y)
                int px2 = margen;
                int py2 = alto - margen - y * escala;

                g2.setColor(Color.BLUE);
                g2.drawLine(px1, py1, px2, py2);
            } // Caso 2: línea vertical
            else if (x > 0 && y == 0) {
                int px = margen + x * escala;
                g2.setColor(Color.RED);
                g2.drawLine(px, alto - margen, px, margen);
            } // Caso 3: línea horizontal
            else if (y > 0 && x == 0) {
                int py = alto - margen - y * escala;
                g2.setColor(Color.RED);
                g2.drawLine(margen, py, ancho - margen, py);
            }
        }

        // === Mostrar en JLabel dentro de JScrollPane ===
        Grafica.setIcon(new ImageIcon(imagen));
        Grafica.setPreferredSize(new Dimension(ancho, alto));
        Grafica.revalidate();

        // Mostrar la imagen en el JLabel
        txtTipo.setText(" - MINIMIZAR");

        //LEER VALORES
        double ex = Double.parseDouble(txtEX.getText());
        double ey = Double.parseDouble(txtEY.getText());

        //INICIALIZAR VARIABLES
        double minZ = Double.MAX_VALUE;
        Object xMin = null;
        Object yMin = null;

        //RECORRER TABLA
        for (int i = 0; i < tblPuntosIn.getRowCount(); i++) {
            Object xObj = tblPuntosIn.getValueAt(i, 0);
            Object yObj = tblPuntosIn.getValueAt(i, 1);

            if (xObj != null && yObj != null) {
                double x = Double.parseDouble(xObj.toString());
                double y = Double.parseDouble(yObj.toString());
                double z = ex * x + ey * y;

                //z no entero
                String zStr;
                if (z == (long) z) {
                    zStr = String.valueOf((long) z); //entero
                } else {
                    zStr = df.format(z); //decimal
                }

                //GUARDAR VALORES Z
                tblPuntosIn.setValueAt(z, i, 2);

                //VERIFICAR SI ES MINIMO
                if (z < minZ) {
                    minZ = z;
                    xMin = x;
                    yMin = y;
                }
            }
        }

        //RESPUESTA
        String resultado = txtEX.getText() + " (" + xMin + ") + " + txtEY.getText() + " (" + yMin + ")";
        txtRespuesta.setText(resultado);
    }//GEN-LAST:event_btnMinimizarActionPerformed

    private void btnMaximizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaximizarActionPerformed

        DecimalFormat df = new DecimalFormat("#.##");

        //ENCONTRAR VALORES PARA GRAFICAR
        DefaultTableModel mR = (DefaultTableModel) tblRestricciones.getModel();
        DefaultTableModel mP = (DefaultTableModel) tblPuntos.getModel();
        DefaultTableModel mPI = (DefaultTableModel) tblPuntosIn.getModel();

        //Limpiar resultados anteriores
        mP.setRowCount(0);

        for (int i = 0; i < 3; i++) {
            Double x = parseDouble(mR.getValueAt(i, 0));
            Double y = parseDouble(mR.getValueAt(i, 1));
            Double z = parseDouble(mR.getValueAt(i, 3));

            if (z == null) {
                continue;
            }

            if (i < 2) {
                // Primeras dos filas
                double px = (x != null && x != 0) ? z / x : 0;
                double py = (y != null && y != 0) ? z / y : 0;
                mP.addRow(new Object[]{df.format(px), df.format(py)});
            } else {
                // Última fila
                Object valSigno = mR.getValueAt(2, 2);
                if (valSigno == null || (!valSigno.toString().trim().equals("<")
                        && !valSigno.toString().trim().equals(">"))) {
                    JOptionPane.showMessageDialog(null,
                            "En la última fila debe ingresar '<' o '>' en la columna Signo.");
                    return;
                }

                if (x != null && Math.abs(x - 1.0) < 1e-9) {
                    mP.addRow(new Object[]{df.format(z), df.format(0)});
                } else if (y != null && Math.abs(y - 1.0) < 1e-9) {
                    mP.addRow(new Object[]{df.format(0), df.format(z)});
                } else {
                    JOptionPane.showMessageDialog(null,
                            "En la última fila debe ingresar 1 en X o Y y Z correspondiente.");
                    return;
                }
            }
        }

        //============ GRAFICA ============
        //Definir un tamaño grande para poder hacer scroll
        int ancho = 2000;
        int alto = 2000;
        int margen = 50;
        int escala = 20;    // cada unidad = 20 píxeles
        int paso = 1;       // numeración cada 1 unidad

        BufferedImage imagen = new BufferedImage(ancho, alto, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = imagen.createGraphics();

        //Fondo blanco
        g2.setColor(Color.WHITE);
        g2.fillRect(0, 0, ancho, alto);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        //Dibujar cuadrícula
        g2.setColor(new Color(230, 230, 230));
        for (int x = margen; x < ancho - margen; x += escala * paso) {
            g2.drawLine(x, margen, x, alto - margen);
        }
        for (int y = alto - margen; y > margen; y -= escala * paso) {
            g2.drawLine(margen, y, ancho - margen, y);
        }

        //Dibujar ejes
        g2.setColor(Color.BLACK);
        g2.drawLine(margen, alto - margen, ancho - margen, alto - margen); // eje X
        g2.drawLine(margen, margen, margen, alto - margen);                // eje Y

        //Flechas de ejes
        g2.drawLine(ancho - margen, alto - margen, ancho - margen - 10, alto - margen - 5);
        g2.drawLine(ancho - margen, alto - margen, ancho - margen - 10, alto - margen + 5);
        g2.drawLine(margen, margen, margen - 5, margen + 10);
        g2.drawLine(margen, margen, margen + 5, margen + 10);

        //Etiquetas de los ejes
        g2.drawString("X", ancho - margen + 15, alto - margen + 5);
        g2.drawString("Y", margen - 15, margen - 10);

        //Numeración eje X
        g2.setFont(new Font("Arial", Font.PLAIN, 10));

        for (int xVal = 0; xVal <= (ancho - 2 * margen) / escala; xVal += paso) {
            int px = margen + xVal * escala;
            int py = alto - margen;
            g2.drawLine(px, py - 3, px, py + 3);
            g2.drawString(String.valueOf(xVal), px - 5, py + 15);
        }

        //Numeración eje Y
        for (int yVal = 0; yVal <= (alto - 2 * margen) / escala; yVal += paso) {
            int px = margen;
            int py = alto - margen - yVal * escala;
            g2.drawLine(px - 3, py, px + 3, py);
            g2.drawString(String.valueOf(yVal), px - 30, py + 5);
        }

        //Dibujar restricciones de la tabla
        DefaultTableModel modelo = (DefaultTableModel) tblPuntos.getModel();
        int filas = modelo.getRowCount();

        for (int i = 0; i < filas; i++) {
            Object objX = modelo.getValueAt(i, 0);
            Object objY = modelo.getValueAt(i, 1);

            if (objX == null && objY == null) {
                continue;
            }

            int x = (objX != null && !objX.toString().isEmpty()) ? Integer.parseInt(objX.toString()) : 0;
            int y = (objY != null && !objY.toString().isEmpty()) ? Integer.parseInt(objY.toString()) : 0;

            // Caso 1: tiene interceptos en ambos ejes
            if (x > 0 && y > 0) {
                // (x,0)
                int px1 = margen + x * escala;
                int py1 = alto - margen;
                // (0,y)
                int px2 = margen;
                int py2 = alto - margen - y * escala;

                g2.setColor(Color.BLUE);
                g2.drawLine(px1, py1, px2, py2);
            } // Caso 2: línea vertical
            else if (x > 0 && y == 0) {
                int px = margen + x * escala;
                g2.setColor(Color.RED);
                g2.drawLine(px, alto - margen, px, margen);
            } // Caso 3: línea horizontal
            else if (y > 0 && x == 0) {
                int py = alto - margen - y * escala;
                g2.setColor(Color.RED);
                g2.drawLine(margen, py, ancho - margen, py);
            }
        }

        // === Mostrar en JLabel dentro de JScrollPane ===
        Grafica.setIcon(new ImageIcon(imagen));
        Grafica.setPreferredSize(new Dimension(ancho, alto));
        Grafica.revalidate();

        txtTipo.setText(" - MAXIMIZAR");

        //LEER VALORES
        double ex = Double.parseDouble(txtEX.getText());
        double ey = Double.parseDouble(txtEY.getText());

        //INICIALIZAR VARIABLES
        double maxZ = Double.NEGATIVE_INFINITY;
        Object xMax = null;
        Object yMax = null;

        //RECORRER TABLA
        for (int i = 0; i < tblPuntosIn.getRowCount(); i++) {
            Object xObj = tblPuntosIn.getValueAt(i, 0);
            Object yObj = tblPuntosIn.getValueAt(i, 1);

            if (xObj != null && yObj != null) {
                double x = Double.parseDouble(xObj.toString());
                double y = Double.parseDouble(yObj.toString());
                double z = ex * x + ey * y;

                //z no entero
                String zStr;
                if (z == (long) z) {
                    zStr = String.valueOf((long) z); //entero
                } else {
                    zStr = df.format(z); //decimal
                }

                //GUARDAR VALORES Z
                tblPuntosIn.setValueAt(zStr, i, 2);

                //VERIFICAR SI ES MAXIMO
                if (z > maxZ) {
                    maxZ = z;
                    xMax = x;
                    yMax = y;
                }
            }
        }

        //RESPUESTA
        String resultado = ex + " (" + xMax + ") + " + ey + " (" + yMax + ")";
        txtRespuesta.setText(resultado);
    }//GEN-LAST:event_btnMaximizarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Grafica;
    public javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnMaximizar;
    private javax.swing.JButton btnMinimizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTextPane jTextPane1;
    public javax.swing.JTable tblPuntos;
    public javax.swing.JTable tblPuntosIn;
    public transient javax.swing.JTable tblRestricciones;
    private javax.swing.JTextField txtEX;
    private javax.swing.JTextField txtEY;
    public javax.swing.JTextField txtRespuesta;
    private javax.swing.JTextField txtTipo;
    // End of variables declaration//GEN-END:variables
}
